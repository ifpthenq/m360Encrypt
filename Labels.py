import sys
class Labels():
   
    def __init__(self):
        
        self.labelinit = True
    
    def loadKeyPairMain(self, headingsize, bodysize):
        body = """
<html>
<head/>
<body><p><span style="font-size:{}pt; font-weight:600;">Load Key Pairs </span></p>
<p><span style=" font-size:{}pt;">You can use an existing Key Pair or generate a new one.
<br/>These keys are used to encrypt and decrypt the shared password. </span></p>
</body>
</html>   
        
""".format(headingsize, bodysize)
        return body
    
    def setLabel17(self, size1):
        body = """
<html><head/><body><p>
<span style=" font-size:{0}pt; font-weight:600;">Copy and paste your own </span>
<span style=" font-size:{0}pt; font-weight:600; text-decoration: underline;">private</span>
<span style=" font-size:{0}pt; font-weight:600;"> key here or click on the 
    button to load it from a file</span></p></body></html>
        
""".format(size1)
        return body
    
    def setLabel18(self, size1):
        body = """
<html><head/><body><p>
<span style=" font-size:{0}pt; font-weight:600;">Copy and paste your partner's </span>
<span style=" font-size:{0}pt; font-weight:600; text-decoration: underline;">public</span>
<span style=" font-size:{0}pt; font-weight:600;"> key here or click on the 
    button to load it from a file</span></p></body></html>
        
""".format(size1)
        return body
        
    def setBitcoin(self, headingsize):
        body = """
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" />
<style type="text/css">
p,li {{ white-space: pre-wrap; margin:0,0,0,0; -qt-block-indent:0; text-indent:0px; font-family:'tahoma'; font-size:{}pt; font-weight:normal;}}
</style></head><body><p style="font-weight:600;">
We Support Privacy and Civil Liberty</p>
<p>Consider helping us out!</p>
<p style=" margin-top:12px;">
<span style="font-weight:600;">
BC: </span>bc1qndzd3fdyjzklvefxz9rch6rk7wnep9t87440tq<br />
<span style="font-weight:600;">ETH: </span>0x5f879Ef9D9680675A51110DD231481faBdd32d6b<br />
<span style="font-weight:600;">DOGE: </span>DF7Yq9nayLb34ctEAcQT5TCuDvyVT1dSqy</p>
</body></html>
        
""".format(headingsize)
        return body
        
    def setFaq(self, question, answer, li):
        body = """
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" />
<style type="text/css">
p,ul,li {{ font-size:{}pt; font-weight:normal; margin:0,0,0,0; -qt-block-indent:0; text-indent:0px; white-space: pre-wrap; }}
.question {{font-weight:600; font-size: {}pt;margin-top:12px;}} 
.answer {{font-size: {}pt; margin-top:5px; -qt-block-indent: 1; text-indent: 12pt;}}
</style></head>
<body><p><span style="font-weight:600;">Frequently Asked Questions</span>
</p><ul><li><p class="question">What encryption algorithms are used?</p>
<p class="answer">Two different algorithms are being used, as is typical for modern encrypted data. 
First, RSA is used for the password exchange. This data is limited in feasible size due to 
how RSA functions. RSA keys can become quite large, and the passphrases used here are limited to 
117 characters to accomdate keys generated by other programs.</p>
<p class="answer">The Message and Notes use AES encryption with SHA-256 as the hash algorithm. 
This is much faster and allows for the transmission of larger amounts of data.</p>
<p class="answer">Together, they create a reliable, 
strong encryption methodology that isn't too terribly slow.
</p></li>
<li><p class="question">
What if my friend and I already have a password we've agreed on?</p>
<p class="answer">That's absolutely fine. If you already have a secure password you would like to use, after loading in the key information,
 you may manually type a password in the Password Exchange tab where labeled.</p></li>
 <li><p class="question">
 Can messages or notes be recovered if I lose my password?</p>
 <p class="answer">
 Fortunately, no. If that were possible, this application's security would be in question as 
 that's really the whole point of encryption. Without the correct password, the data received is 
 useless to an eavesdropping party.</p>
 <p class="answer">Further, we take measures to check that 
 there are no backdoors or security loopholes built into the software.
 </p></li>
 <li><p class="question">
 What is the legality of using software like this? Is this legal?</p>
 <p class="answer">At the 
 time of release, this software is completely legal. As of this release, US citizens have a right to, 
 and the right to protect, their own privacy. The software does not carry any kind of guarantee or 
 warranty, express or implied, of its use. Additionally, this software can not make any guarantees or 
 warranties to the security of the messages created during its use, although we have attempted to 
 ensure its security by those reasonable means available to us.</p>
 <p class="answer">However, 
 Modulus360's intent is to comply with all U.S. laws and regulations, so, should any law be changed 
 to disallow private encryption, any license to use this software, express or implied, should be 
 considered revoked and we humbly request you voluntarily destroy any copies of this software. This 
 software should not be used to plan, coordinate, or perpetrate any illegal or illicit activities. 
 As well, we remind users that this software should not be used in any country where its use is 
 expressly prohibited by US law. Use at your own risk.
 </p></li></ul></body></html>
        
""".format(li, question, answer)
        return body
        
    def setLabel3(self, size):
        body = """
<html><head/><body><p>
<span style=" font-size:{0}pt; font-weight:600; text-decoration: underline;">Sender</span></p>
<p><span style=" font-size:{0}pt;">Use RSA to encrypt a shared password. 
<br /><span style=" font-size:{0}pt;">Prerequisites to Encrypt: You must have your communication partner's public key. </span></p>
</body></html>        
        
""".format(size)
        return body
        
    def setLabel10(self, size):
        body = """
 <html><head/><body><p><span style=" font-size:{}pt;">What password do you want to share with your partner?</span></p></body></html>       
""".format(size)
        return body
        
        
    def setLabel11(self, size):
        body = """
<html><head/><body>
<p><span style=" font-size:{0}pt; font-weight:600; text-decoration: underline;">Receiver</span></p>
<p><span style=" font-size:{0}pt;">Use RSA to decrypt a shared password. <br />
<span style=" font-size:{0}pt;">Prerequisites to Decrypt: You must have been sent a password 
    encrypted with your public key. </span></p>
    </body></html>
""".format(size)
        return body
        
    def setLabel19(self, size1, size2):
        body = """
<html><head/><body>
<p><span style=" font-size:{}pt; font-weight:600;">Encrypt/Decrypt Message</span></p>
<p><span style=" font-size:{}pt; font-weight:400;">Messages in this window will be encrypted or decrypted using the given password.</span></p>
</body></html>
""".format(size1, size2)
        return body
        
    def setLabel23(self, size):
        body = """
<html><head/><body><span style=" font-size:{}pt; font-weight:600;">Password</span></body></html>
""".format(size)
        return body
        
    def setLabel33(self, size):
        body = """
<html><head/><body><p><span style=" font-size:{0}pt; text-decoration: underline;">
Encrypted Notes</span></p>
<p><span style=" font-size:{0}pt;">On the fly encryption for text notes.<br/>
Requires password to unlock.<br/>
No plain text copies ever written to hard drive</span></p></body></html>
""".format(size)
        return body
        
    def setLabel34(self, size):
        body = """
<html><head/><body><span style=" font-size:{}pt; font-weight:600;">Password</span></body></html>
""".format(size)
        return body